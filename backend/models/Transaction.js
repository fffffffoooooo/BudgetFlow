const mongoose = require('mongoose');

const TransactionSchema = new mongoose.Schema({
  user: {
    type: mongoose.Schema.Types.ObjectId,
    ref: 'User',
    required: true
  },
  amount: {
    type: Number,
    required: true
  },
  type: {
    type: String,
    enum: ['expense', 'income'],
    required: true
  },
  description: {
    type: String,
    required: true
  },
  currency: {
    type: String,
    required: true,
    default: 'EUR'
  },
  originalAmount: {
    type: Number
  },
  originalCurrency: {
    type: String
  },
  category: {
    type: mongoose.Schema.Types.ObjectId,
    ref: 'Category',
    required: true
  },
  date: {
    type: Date,
    default: Date.now
  },
  isAutoGenerated: {
    type: Boolean,
    default: false
  },
  createdAt: {
    type: Date,
    default: Date.now
  }
});

// Hook post-save pour vérifier les limites de budget après chaque nouvelle transaction
TransactionSchema.post('save', async function(doc) {
  try {
    if (doc.type === 'expense') {
      const { checkBudgetLimits } = require('../services/alertService');
      await checkBudgetLimits(doc.user);
    }
    
    // Vérifier le solde total après chaque transaction
    const { checkBalanceLimits } = require('../services/alertService');
    await checkBalanceLimits(doc.user);
  } catch (error) {
    console.error('Erreur lors de la vérification des limites après enregistrement de la transaction :', error);
    // Ne pas échouer l'opération de sauvegarde si la vérification échoue
  }
});

module.exports = mongoose.model('Transaction', TransactionSchema);
